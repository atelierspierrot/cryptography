var search_data = {
    'index': {
        'searchIndex': ["cryptography","cryptography\\substitutioncipher","cryptography\\substitutiontable","cryptography\\cryptography","cryptography\\helper","cryptography\\substitutioncipher\\abstractsubstitutioncipher","cryptography\\substitutioncipher\\affinesubstitution","cryptography\\substitutioncipher\\homophonicsubstitution","cryptography\\substitutioncipher\\inversion","cryptography\\substitutioncipher\\polyalphabeticsubstitution","cryptography\\substitutioncipher\\repertorysubstitution","cryptography\\substitutioncipher\\rotation","cryptography\\substitutioncipher\\simplesubstitution","cryptography\\substitutioncipher\\squaresubstitution","cryptography\\substitutioncipher\\vigenerecipher","cryptography\\substitutiontable\\abstractsubstitutiontable","cryptography\\substitutiontable\\closuresubstitutiontable","cryptography\\substitutiontable\\rotarysubstitutiontable","cryptography\\substitutiontable\\simplesubstitutiontable","cryptography\\substitutiontable\\squaresubstitutiontable","cryptography\\substitutiontable\\tabularecta","cryptography\\cryptography::getallcharacters","cryptography\\helper::tabletostring","cryptography\\helper::randomize","cryptography\\helper::rotate","cryptography\\helper::testcase","cryptography\\substitutioncipher\\abstractsubstitutioncipher::setsubstitutiontable","cryptography\\substitutioncipher\\abstractsubstitutioncipher::getsubstitutiontable","cryptography\\substitutioncipher\\abstractsubstitutioncipher::setflag","cryptography\\substitutioncipher\\abstractsubstitutioncipher::process","cryptography\\substitutioncipher\\affinesubstitution::__construct","cryptography\\substitutioncipher\\affinesubstitution::crypt","cryptography\\substitutioncipher\\affinesubstitution::decrypt","cryptography\\substitutioncipher\\homophonicsubstitution::__construct","cryptography\\substitutioncipher\\homophonicsubstitution::substitutiontabletostring","cryptography\\substitutioncipher\\homophonicsubstitution::crypt","cryptography\\substitutioncipher\\homophonicsubstitution::decrypt","cryptography\\substitutioncipher\\inversion::__construct","cryptography\\substitutioncipher\\polyalphabeticsubstitution::__construct","cryptography\\substitutioncipher\\polyalphabeticsubstitution::substitutiontabletostring","cryptography\\substitutioncipher\\polyalphabeticsubstitution::crypt","cryptography\\substitutioncipher\\polyalphabeticsubstitution::decrypt","cryptography\\substitutioncipher\\repertorysubstitution::substitutiontabletostring","cryptography\\substitutioncipher\\repertorysubstitution::crypt","cryptography\\substitutioncipher\\repertorysubstitution::decrypt","cryptography\\substitutioncipher\\rotation::__construct","cryptography\\substitutioncipher\\rotation::rot13","cryptography\\substitutioncipher\\simplesubstitution::__construct","cryptography\\substitutioncipher\\simplesubstitution::substitutiontabletostring","cryptography\\substitutioncipher\\simplesubstitution::crypt","cryptography\\substitutioncipher\\simplesubstitution::decrypt","cryptography\\substitutioncipher\\squaresubstitution::__construct","cryptography\\substitutioncipher\\squaresubstitution::crypt","cryptography\\substitutioncipher\\squaresubstitution::decrypt","cryptography\\substitutioncipher\\vigenerecipher::__construct","cryptography\\substitutioncipher\\vigenerecipher::setuserkey","cryptography\\substitutiontable\\abstractsubstitutiontable::__construct","cryptography\\substitutiontable\\abstractsubstitutiontable::setplaintextkey","cryptography\\substitutiontable\\abstractsubstitutiontable::setsubstitutions","cryptography\\substitutiontable\\abstractsubstitutiontable::addsubstitution","cryptography\\substitutiontable\\abstractsubstitutiontable::substitutiontabletostring","cryptography\\substitutiontable\\abstractsubstitutiontable::getplaintextkey","cryptography\\substitutiontable\\abstractsubstitutiontable::getsubstitutions","cryptography\\substitutiontable\\abstractsubstitutiontable::getsubstitutiontable","cryptography\\substitutiontable\\closuresubstitutiontable::__construct","cryptography\\substitutiontable\\closuresubstitutiontable::setcryptclosure","cryptography\\substitutiontable\\closuresubstitutiontable::setdecryptclosure","cryptography\\substitutiontable\\closuresubstitutiontable::getplaintextkey","cryptography\\substitutiontable\\closuresubstitutiontable::getsubstitutions","cryptography\\substitutiontable\\closuresubstitutiontable::getsubstitutiontable","cryptography\\substitutiontable\\rotarysubstitutiontable::__construct","cryptography\\substitutiontable\\rotarysubstitutiontable::setrotation","cryptography\\substitutiontable\\rotarysubstitutiontable::rotate","cryptography\\substitutiontable\\simplesubstitutiontable::__construct","cryptography\\substitutiontable\\simplesubstitutiontable::getplaintextkey","cryptography\\substitutiontable\\simplesubstitutiontable::getsubstitutions","cryptography\\substitutiontable\\simplesubstitutiontable::getsubstitutiontable","cryptography\\substitutiontable\\squaresubstitutiontable::__construct","cryptography\\substitutiontable\\squaresubstitutiontable::getsubstitutiontable","cryptography\\substitutiontable\\tabularecta::__construct","cryptography\\substitutiontable\\tabularecta::setplaintextkey","cryptography\\substitutiontable\\tabularecta::substitutiontabletostring"],
        'info': [["Cryptography","","Cryptography.html","","",3],["Cryptography\\SubstitutionCipher","","Cryptography\/SubstitutionCipher.html","","",3],["Cryptography\\SubstitutionTable","","Cryptography\/SubstitutionTable.html","","",3],["Cryptography","Cryptography","Cryptography\/Cryptography.html","","",1],["Helper","Cryptography","Cryptography\/Helper.html","","",1],["AbstractSubstitutionCipher","Cryptography\\SubstitutionCipher","Cryptography\/SubstitutionCipher\/AbstractSubstitutionCipher.html","","",1],["AffineSubstitution","Cryptography\\SubstitutionCipher","Cryptography\/SubstitutionCipher\/AffineSubstitution.html"," < SimpleSubstitution","This use an affine function to calculate the cipher",1],["HomophonicSubstitution","Cryptography\\SubstitutionCipher","Cryptography\/SubstitutionCipher\/HomophonicSubstitution.html"," < SimpleSubstitution","",1],["Inversion","Cryptography\\SubstitutionCipher","Cryptography\/SubstitutionCipher\/Inversion.html"," < SimpleSubstitution","Inversion substitution: \"Atbash cipher\"",1],["PolyAlphabeticSubstitution","Cryptography\\SubstitutionCipher","Cryptography\/SubstitutionCipher\/PolyAlphabeticSubstitution.html"," < SimpleSubstitution","",1],["RepertorySubstitution","Cryptography\\SubstitutionCipher","Cryptography\/SubstitutionCipher\/RepertorySubstitution.html"," < HomophonicSubstitution","The keys here must be defined as an array like:",1],["Rotation","Cryptography\\SubstitutionCipher","Cryptography\/SubstitutionCipher\/Rotation.html"," < SimpleSubstitution","Rotation substitution: \"Caesar cipher\"",1],["SimpleSubstitution","Cryptography\\SubstitutionCipher","Cryptography\/SubstitutionCipher\/SimpleSubstitution.html"," < AbstractSubstitutionCipher","",1],["SquareSubstitution","Cryptography\\SubstitutionCipher","Cryptography\/SubstitutionCipher\/SquareSubstitution.html"," < SimpleSubstitution","Square substitution: \"Polybe square cipher\" like",1],["VigenereCipher","Cryptography\\SubstitutionCipher","Cryptography\/SubstitutionCipher\/VigenereCipher.html"," < PolyAlphabeticSubstitution","",1],["AbstractSubstitutionTable","Cryptography\\SubstitutionTable","Cryptography\/SubstitutionTable\/AbstractSubstitutionTable.html","","",1],["ClosureSubstitutionTable","Cryptography\\SubstitutionTable","Cryptography\/SubstitutionTable\/ClosureSubstitutionTable.html"," < AbstractSubstitutionTable","",1],["RotarySubstitutionTable","Cryptography\\SubstitutionTable","Cryptography\/SubstitutionTable\/RotarySubstitutionTable.html"," < SimpleSubstitutionTable","",1],["SimpleSubstitutionTable","Cryptography\\SubstitutionTable","Cryptography\/SubstitutionTable\/SimpleSubstitutionTable.html"," < AbstractSubstitutionTable","",1],["SquareSubstitutionTable","Cryptography\\SubstitutionTable","Cryptography\/SubstitutionTable\/SquareSubstitutionTable.html"," < SimpleSubstitutionTable","",1],["TabulaRecta","Cryptography\\SubstitutionTable","Cryptography\/SubstitutionTable\/TabulaRecta.html","","",1],["Cryptography::getAllCharacters","Cryptography\\Cryptography","Cryptography\/Cryptography.html#method_getAllCharacters","()","",2],["Helper::tableToString","Cryptography\\Helper","Cryptography\/Helper.html#method_tableToString","(array $body, array $headers_line = array(), array $headers_column = array(), string $title = &#039;&#039;)","Table to string renderer",2],["Helper::randomize","Cryptography\\Helper","Cryptography\/Helper.html#method_randomize","($input)","Randomize an input string",2],["Helper::rotate","Cryptography\\Helper","Cryptography\/Helper.html#method_rotate","($input, int $rotation = 1)","Rotate an input string",2],["Helper::testCase","Cryptography\\Helper","Cryptography\/Helper.html#method_testCase","($list, string $type = &#039;upper&#039;)","Case tester",2],["AbstractSubstitutionCipher::setSubstitutionTable","Cryptography\\SubstitutionCipher\\AbstractSubstitutionCipher","Cryptography\/SubstitutionCipher\/AbstractSubstitutionCipher.html#method_setSubstitutionTable","(<a href=\"Cryptography\/SubstitutionTable\/AbstractSubstitutionTable.html\"><abbr title=\"Cryptography\\SubstitutionTable\\AbstractSubstitutionTable\">AbstractSubstitutionTable<\/abbr><\/a> $object)","Define the cipher substitution table object",2],["AbstractSubstitutionCipher::getSubstitutionTable","Cryptography\\SubstitutionCipher\\AbstractSubstitutionCipher","Cryptography\/SubstitutionCipher\/AbstractSubstitutionCipher.html#method_getSubstitutionTable","()","Retrieve the cipher substitution object",2],["AbstractSubstitutionCipher::setFlag","Cryptography\\SubstitutionCipher\\AbstractSubstitutionCipher","Cryptography\/SubstitutionCipher\/AbstractSubstitutionCipher.html#method_setFlag","($flag)","Define the behavior flag of the object",2],["AbstractSubstitutionCipher::process","Cryptography\\SubstitutionCipher\\AbstractSubstitutionCipher","Cryptography\/SubstitutionCipher\/AbstractSubstitutionCipher.html#method_process","()","Generic method to dispatch the \"to do\" action",2],["AffineSubstitution::__construct","Cryptography\\SubstitutionCipher\\AffineSubstitution","Cryptography\/SubstitutionCipher\/AffineSubstitution.html#method___construct","(string $a, array $b, null $plaintext_key = null, int $flag = Cryptography::PROCESS_ALL)","",2],["AffineSubstitution::crypt","Cryptography\\SubstitutionCipher\\AffineSubstitution","Cryptography\/SubstitutionCipher\/AffineSubstitution.html#method_crypt","($str)","Crypt a string",2],["AffineSubstitution::decrypt","Cryptography\\SubstitutionCipher\\AffineSubstitution","Cryptography\/SubstitutionCipher\/AffineSubstitution.html#method_decrypt","($str)","Decrypt a string",2],["HomophonicSubstitution::__construct","Cryptography\\SubstitutionCipher\\HomophonicSubstitution","Cryptography\/SubstitutionCipher\/HomophonicSubstitution.html#method___construct","(array $keys_table, int $flag = Cryptography::PROCESS_ALL)","The keys here must be defined as an array like:",2],["HomophonicSubstitution::substitutionTableToString","Cryptography\\SubstitutionCipher\\HomophonicSubstitution","Cryptography\/SubstitutionCipher\/HomophonicSubstitution.html#method_substitutionTableToString","()","Debugging the substitution table",2],["HomophonicSubstitution::crypt","Cryptography\\SubstitutionCipher\\HomophonicSubstitution","Cryptography\/SubstitutionCipher\/HomophonicSubstitution.html#method_crypt","($str)","Crypt a string",2],["HomophonicSubstitution::decrypt","Cryptography\\SubstitutionCipher\\HomophonicSubstitution","Cryptography\/SubstitutionCipher\/HomophonicSubstitution.html#method_decrypt","($str)","Decrypt a string",2],["Inversion::__construct","Cryptography\\SubstitutionCipher\\Inversion","Cryptography\/SubstitutionCipher\/Inversion.html#method___construct","(null $plaintext_key = null, array|int $flag = Cryptography::PROCESS_ALL)","",2],["PolyAlphabeticSubstitution::__construct","Cryptography\\SubstitutionCipher\\PolyAlphabeticSubstitution","Cryptography\/SubstitutionCipher\/PolyAlphabeticSubstitution.html#method___construct","(string $plaintext_key, int $frequency = 1, int $rotation = 1, int $flag = Cryptography::PROCESS_ALL)","",2],["PolyAlphabeticSubstitution::substitutionTableToString","Cryptography\\SubstitutionCipher\\PolyAlphabeticSubstitution","Cryptography\/SubstitutionCipher\/PolyAlphabeticSubstitution.html#method_substitutionTableToString","()","Debugging the substitution table",2],["PolyAlphabeticSubstitution::crypt","Cryptography\\SubstitutionCipher\\PolyAlphabeticSubstitution","Cryptography\/SubstitutionCipher\/PolyAlphabeticSubstitution.html#method_crypt","($str)","Crypt a string",2],["PolyAlphabeticSubstitution::decrypt","Cryptography\\SubstitutionCipher\\PolyAlphabeticSubstitution","Cryptography\/SubstitutionCipher\/PolyAlphabeticSubstitution.html#method_decrypt","($str)","Decrypt a string",2],["RepertorySubstitution::substitutionTableToString","Cryptography\\SubstitutionCipher\\RepertorySubstitution","Cryptography\/SubstitutionCipher\/RepertorySubstitution.html#method_substitutionTableToString","()","Debugging the substitution table",2],["RepertorySubstitution::crypt","Cryptography\\SubstitutionCipher\\RepertorySubstitution","Cryptography\/SubstitutionCipher\/RepertorySubstitution.html#method_crypt","($str)","Crypt a string",2],["RepertorySubstitution::decrypt","Cryptography\\SubstitutionCipher\\RepertorySubstitution","Cryptography\/SubstitutionCipher\/RepertorySubstitution.html#method_decrypt","($str)","Decrypt a string",2],["Rotation::__construct","Cryptography\\SubstitutionCipher\\Rotation","Cryptography\/SubstitutionCipher\/Rotation.html#method___construct","(string $plaintext_key, array $rotation_value, int $flag = Cryptography::PROCESS_ALL)","",2],["Rotation::rot13","Cryptography\\SubstitutionCipher\\Rotation","Cryptography\/SubstitutionCipher\/Rotation.html#method_rot13","($str)","Shortcut or `ROT13`",2],["SimpleSubstitution::__construct","Cryptography\\SubstitutionCipher\\SimpleSubstitution","Cryptography\/SubstitutionCipher\/SimpleSubstitution.html#method___construct","(string $plaintext_key = &#039;&#039;, array $cipher_key = array(), int $flag = Cryptography::PROCESS_ALL)","",2],["SimpleSubstitution::substitutionTableToString","Cryptography\\SubstitutionCipher\\SimpleSubstitution","Cryptography\/SubstitutionCipher\/SimpleSubstitution.html#method_substitutionTableToString","()","Debugging the substitution table used",2],["SimpleSubstitution::crypt","Cryptography\\SubstitutionCipher\\SimpleSubstitution","Cryptography\/SubstitutionCipher\/SimpleSubstitution.html#method_crypt","($str)","Crypt a string",2],["SimpleSubstitution::decrypt","Cryptography\\SubstitutionCipher\\SimpleSubstitution","Cryptography\/SubstitutionCipher\/SimpleSubstitution.html#method_decrypt","($str)","Decrypt a string",2],["SquareSubstitution::__construct","Cryptography\\SubstitutionCipher\\SquareSubstitution","Cryptography\/SubstitutionCipher\/SquareSubstitution.html#method___construct","(null $plaintext_key = null, array|int $flag = Cryptography::PROCESS_ALL)","",2],["SquareSubstitution::crypt","Cryptography\\SubstitutionCipher\\SquareSubstitution","Cryptography\/SubstitutionCipher\/SquareSubstitution.html#method_crypt","($str)","Crypt a string",2],["SquareSubstitution::decrypt","Cryptography\\SubstitutionCipher\\SquareSubstitution","Cryptography\/SubstitutionCipher\/SquareSubstitution.html#method_decrypt","($str)","Decrypt a string",2],["VigenereCipher::__construct","Cryptography\\SubstitutionCipher\\VigenereCipher","Cryptography\/SubstitutionCipher\/VigenereCipher.html#method___construct","($user_key, string $plaintext_key = Cryptography::ALPHABET_UPPER)","",2],["VigenereCipher::setUserKey","Cryptography\\SubstitutionCipher\\VigenereCipher","Cryptography\/SubstitutionCipher\/VigenereCipher.html#method_setUserKey","($str)","",2],["AbstractSubstitutionTable::__construct","Cryptography\\SubstitutionTable\\AbstractSubstitutionTable","Cryptography\/SubstitutionTable\/AbstractSubstitutionTable.html#method___construct","(string $plaintext_key = &#039;&#039;, array $substitution_table = array())","Load the plain text key and substitutions table",2],["AbstractSubstitutionTable::setPlaintextKey","Cryptography\\SubstitutionTable\\AbstractSubstitutionTable","Cryptography\/SubstitutionTable\/AbstractSubstitutionTable.html#method_setPlaintextKey","($str)","Define the plain text key",2],["AbstractSubstitutionTable::setSubstitutions","Cryptography\\SubstitutionTable\\AbstractSubstitutionTable","Cryptography\/SubstitutionTable\/AbstractSubstitutionTable.html#method_setSubstitutions","(array $table)","Define the substitutions table",2],["AbstractSubstitutionTable::addSubstitution","Cryptography\\SubstitutionTable\\AbstractSubstitutionTable","Cryptography\/SubstitutionTable\/AbstractSubstitutionTable.html#method_addSubstitution","($str)","Add an entry to the substitutions table",2],["AbstractSubstitutionTable::substitutionTableToString","Cryptography\\SubstitutionTable\\AbstractSubstitutionTable","Cryptography\/SubstitutionTable\/AbstractSubstitutionTable.html#method_substitutionTableToString","()","Debugging the substitutions table",2],["AbstractSubstitutionTable::getPlaintextKey","Cryptography\\SubstitutionTable\\AbstractSubstitutionTable","Cryptography\/SubstitutionTable\/AbstractSubstitutionTable.html#method_getPlaintextKey","()","Must return the original plain text key",2],["AbstractSubstitutionTable::getSubstitutions","Cryptography\\SubstitutionTable\\AbstractSubstitutionTable","Cryptography\/SubstitutionTable\/AbstractSubstitutionTable.html#method_getSubstitutions","()","Must return the substitutions table",2],["AbstractSubstitutionTable::getSubstitutionTable","Cryptography\\SubstitutionTable\\AbstractSubstitutionTable","Cryptography\/SubstitutionTable\/AbstractSubstitutionTable.html#method_getSubstitutionTable","(int $action = Cryptography::CRYPT)","Must return a table of correspondence between plain",2],["ClosureSubstitutionTable::__construct","Cryptography\\SubstitutionTable\\ClosureSubstitutionTable","Cryptography\/SubstitutionTable\/ClosureSubstitutionTable.html#method___construct","(string $plaintext_key = &#039;&#039;, null $crypt_closure = null, null $decrypt_closure = null)","",2],["ClosureSubstitutionTable::setCryptClosure","Cryptography\\SubstitutionTable\\ClosureSubstitutionTable","Cryptography\/SubstitutionTable\/ClosureSubstitutionTable.html#method_setCryptClosure","(callable $fct)","Define the encryption closure",2],["ClosureSubstitutionTable::setDecryptClosure","Cryptography\\SubstitutionTable\\ClosureSubstitutionTable","Cryptography\/SubstitutionTable\/ClosureSubstitutionTable.html#method_setDecryptClosure","(callable $fct)","Define the decryption closure",2],["ClosureSubstitutionTable::getPlaintextKey","Cryptography\\SubstitutionTable\\ClosureSubstitutionTable","Cryptography\/SubstitutionTable\/ClosureSubstitutionTable.html#method_getPlaintextKey","()","",2],["ClosureSubstitutionTable::getSubstitutions","Cryptography\\SubstitutionTable\\ClosureSubstitutionTable","Cryptography\/SubstitutionTable\/ClosureSubstitutionTable.html#method_getSubstitutions","()","",2],["ClosureSubstitutionTable::getSubstitutionTable","Cryptography\\SubstitutionTable\\ClosureSubstitutionTable","Cryptography\/SubstitutionTable\/ClosureSubstitutionTable.html#method_getSubstitutionTable","(int $action = Cryptography::CRYPT)","",2],["RotarySubstitutionTable::__construct","Cryptography\\SubstitutionTable\\RotarySubstitutionTable","Cryptography\/SubstitutionTable\/RotarySubstitutionTable.html#method___construct","(string $plaintext_key = &#039;&#039;, int $rotation = 1)","",2],["RotarySubstitutionTable::setRotation","Cryptography\\SubstitutionTable\\RotarySubstitutionTable","Cryptography\/SubstitutionTable\/RotarySubstitutionTable.html#method_setRotation","($rotation)","Define the rotation value",2],["RotarySubstitutionTable::rotate","Cryptography\\SubstitutionTable\\RotarySubstitutionTable","Cryptography\/SubstitutionTable\/RotarySubstitutionTable.html#method_rotate","(null $rotation = null)","Make a run of rotation",2],["SimpleSubstitutionTable::__construct","Cryptography\\SubstitutionTable\\SimpleSubstitutionTable","Cryptography\/SubstitutionTable\/SimpleSubstitutionTable.html#method___construct","(string $plaintext_key = &#039;&#039;, array $substitution_table = array())","",2],["SimpleSubstitutionTable::getPlaintextKey","Cryptography\\SubstitutionTable\\SimpleSubstitutionTable","Cryptography\/SubstitutionTable\/SimpleSubstitutionTable.html#method_getPlaintextKey","()","",2],["SimpleSubstitutionTable::getSubstitutions","Cryptography\\SubstitutionTable\\SimpleSubstitutionTable","Cryptography\/SubstitutionTable\/SimpleSubstitutionTable.html#method_getSubstitutions","()","",2],["SimpleSubstitutionTable::getSubstitutionTable","Cryptography\\SubstitutionTable\\SimpleSubstitutionTable","Cryptography\/SubstitutionTable\/SimpleSubstitutionTable.html#method_getSubstitutionTable","(int $action = Cryptography::CRYPT)","",2],["SquareSubstitutionTable::__construct","Cryptography\\SubstitutionTable\\SquareSubstitutionTable","Cryptography\/SubstitutionTable\/SquareSubstitutionTable.html#method___construct","(string $plaintext_key = &#039;&#039;)","",2],["SquareSubstitutionTable::getSubstitutionTable","Cryptography\\SubstitutionTable\\SquareSubstitutionTable","Cryptography\/SubstitutionTable\/SquareSubstitutionTable.html#method_getSubstitutionTable","(int $action = Cryptography::CRYPT)","",2],["TabulaRecta::__construct","Cryptography\\SubstitutionTable\\TabulaRecta","Cryptography\/SubstitutionTable\/TabulaRecta.html#method___construct","($plaintext_key)","",2],["TabulaRecta::setPlaintextKey","Cryptography\\SubstitutionTable\\TabulaRecta","Cryptography\/SubstitutionTable\/TabulaRecta.html#method_setPlaintextKey","($str)","Define the plain text key and construct the substitutions",2],["TabulaRecta::substitutionTableToString","Cryptography\\SubstitutionTable\\TabulaRecta","Cryptography\/SubstitutionTable\/TabulaRecta.html#method_substitutionTableToString","()","Debugging",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']